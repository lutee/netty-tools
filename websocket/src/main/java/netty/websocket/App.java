/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package netty.websocket;

import java.security.cert.CertificateException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.SSLException;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;
import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketServerCompressionHandler;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import io.netty.handler.timeout.IdleStateHandler;
import netty.websocket.handler.HeartbeatHandler;
import netty.websocket.handler.WebSocketHandler;

public class App {

	private final Map<String, Channel> channels = new ConcurrentHashMap<>();

	public static void main(String[] args) throws CertificateException, SSLException {
		new App().start(8080);
	}

	public void start(int port) throws CertificateException, SSLException {
		NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
		NioEventLoopGroup workerGroup = new NioEventLoopGroup();
//		ClassLoader classLoader = App.class.getClassLoader();

//		SslContext sslContext = SslContextBuilder.forServer(classLoader.getResourceAsStream("localhost+3.pem"),
//				classLoader.getResourceAsStream("localhost+3-key.pem")).build();

		try {
			ServerBootstrap bootstrap = new ServerBootstrap();
			bootstrap.group(bossGroup, workerGroup);
			bootstrap.channel(NioServerSocketChannel.class);
			bootstrap.option(ChannelOption.SO_BACKLOG, 128);
			bootstrap.handler(new LoggingHandler(LogLevel.INFO));
			bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {

				@Override
				protected void initChannel(SocketChannel ch) throws Exception {
					ChannelPipeline pipeline = ch.pipeline();
					// pipeline.addLast(sslContext.newHandler(ch.alloc()));
					pipeline.addLast(new IdleStateHandler(0, 0, 60, TimeUnit.SECONDS));
					pipeline.addLast(new HeartbeatHandler());
					pipeline.addLast(new HttpServerCodec());
					pipeline.addLast(new HttpObjectAggregator(8192));
					// pipeline.addLast(new SecurityCheckHandler());
					pipeline.addLast(new WebSocketServerCompressionHandler());
					pipeline.addLast(new WebSocketServerProtocolHandler("/", null, true));
					pipeline.addLast(new WebSocketHandler(channels));
				}
			});
			ChannelFuture future = bootstrap.bind(port);
			future.syncUninterruptibly();
			future.channel().closeFuture().syncUninterruptibly();
		} finally {
			workerGroup.shutdownGracefully();
			bossGroup.shutdownGracefully();
		}

	}
}
